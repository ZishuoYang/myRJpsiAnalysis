#include <cmath>
#include <iostream>
#include <string>
using std::cout;
using std::endl;
using std::string;

#include <TROOT.h>
#include <TFile.h>
#include <TTree.h>
//#include <TH1F.h>
#include <TMath.h>

long count(TTree* tree,
           string condA="",
           string condB="",
           string condC="",
           string condD="",
           string condE="",
           string condF="",
           string condG="",
           string condH="",
           string condI="",
           string condJ="") 
{
  string cond = condA;
  if (condB != "")
    cond += " && " + condB ;
  if (condC != "")
    cond += " && " + condC ;
  if (condD != "")
    cond += " && " + condD ;
  if (condE != "")
    cond += " && " + condE ;
  if (condF != "")
    cond += " && " + condF ;
  if (condG != "")
    cond += " && " + condG ;
  if (condH != "")
    cond += " && " + condH ;
  if (condI != "")
    cond += " && " + condI ;
  if (condJ != "")
    cond += " && " + condJ ;

  long c = tree->Draw("",cond.c_str());
  return c;
}

void probinfo(long N, long Ntot)
{
  if (Ntot == 0) {
    cout << "Ntot is 0!!!" << endl;
    return;
  }
  
  
  double prob = N/double(Ntot);
  double var = prob*(1.0-prob)/double(Ntot);
  double err = TMath::Sqrt(var);
  cout << 100*prob << " +/- " << 100*err << " %" << endl;
}


void efficiencies()
{

  // OPEN FILE AND GET MC TREE, REC TREE
  gROOT->Reset();
  TFile* f = new TFile("Bc2JpsiMu.root","READ");
  TTree* mctree = (TTree*)f->Get("MCBc2JpsiMuTuple/MCMuDecayTree");
  //TTree* mctree = (TTree*)f->Get("MCBc2JpsiTauTuple/MCTauDecayTree");
  TTree* rectree = (TTree*)f->Get("Bc2JpsiMu_Tuple/DecayTree");
   
  string BCETA = "0.5*TMath::Log("
    "(TMath::Sqrt(Bc_TRUEP_Z*Bc_TRUEP_Z + Bc_TRUEPT*Bc_TRUEPT) + Bc_TRUEP_Z)"
    " / "
    " (TMath::Sqrt(Bc_TRUEP_Z*Bc_TRUEP_Z + Bc_TRUEPT*Bc_TRUEPT) - Bc_TRUEP_Z)"
    " )";
  string BCPT = "Bc_TRUEPT";
  string BACHMUTHETA = "(TMath::ATan(BachMu_TRUEPT/BachMu_TRUEP_Z)*1000)"; // in mrad
  string MUPTHETA = "(TMath::ATan(MuP_TRUEPT/MuP_TRUEP_Z)*1000)"; // in mrad
  string MUMTHETA = "(TMath::ATan(MuM_TRUEPT/MuM_TRUEP_Z)*1000)"; // in mrad

  // DaughtersInLHCb acceptance cut (Daughters)
  string ACCEPTANCE = 
    "(" + BACHMUTHETA + " > 5) && (" + BACHMUTHETA + " < 400)"
    " && (" + MUPTHETA    + " > 5) && (" + MUPTHETA + " < 400)"
    " && (" + MUMTHETA    + " > 5) && (" + MUMTHETA + " < 400)";
  string NOT_ACCEPTANCE = "!(" + ACCEPTANCE + ")";

  string FORWARD_BC = "Bc_TRUEP_Z>0";
  string NOT_FORWARD_BC = "!(" + FORWARD_BC + ")";

  string SIGNAL_BC =
    "(TMath::Abs(" + BCETA + " - 3.5) < 1) && (Bc_TRUEPT > 5*1000) && (Bc_TRUEPT < 100*1000)";
  string NOT_SIGNAL_BC = "!(" + SIGNAL_BC + ")";

  string RECO =
    "BachMu_Reconstructed==1 && MuP_Reconstructed==1 && MuM_Reconstructed==1";
  string NRECO = "!(" + RECO + ")";

  string STRIPPED = 
    //    "StrippingFullDSTDiMuonJpsi2MuMuDetachedLineDecision";
    "StrippingTriMuonBc2ThreeMuDecision";
  string NOT_STRIPPED = "!(" + STRIPPED + ")";

  string TRIG = 
    "(Bc_L0MuonDecision_TOS | Bc_L0DiMuonDecision_TOS)"
    " && (Bc_Hlt1DiMuonHighMassDecision_TOS | Bc_Hlt1DiMuonLowMassDecision_TOS)"
    " && Bc_Hlt2DiMuonJPsiHighPTDecision_TOS";
  
  string TMED = "Bc_BKGCAT==0 && " + STRIPPED;
  //string TMED = "Bc_BKGCAT==10";
  
  long N = count(mctree);
  long N_FOR = count(mctree,FORWARD_BC);
  long N_SIG = count(mctree,SIGNAL_BC);
  long N_ACC = count(mctree,ACCEPTANCE);

  long N_BACK = count(mctree,NOT_FORWARD_BC);
  long N_FOR_N_SIG = count(mctree,FORWARD_BC,NOT_SIGNAL_BC);
  long N_FOR_ONLY = count(mctree,FORWARD_BC,NOT_SIGNAL_BC,NOT_ACCEPTANCE);
  long N_SIG_N_ACC = count(mctree,SIGNAL_BC,NOT_ACCEPTANCE);
  long N_ACC_N_SIG = count(mctree,ACCEPTANCE,NOT_SIGNAL_BC);
  long N_SIG_A_ACC = count(mctree,SIGNAL_BC,ACCEPTANCE);

  cout << "N() = " << N << endl;
  cout << "N(BACKWARD) = " << N_BACK << endl;
  cout << "N(FORWARD) = " << N_FOR << endl;
  cout << "N(SIGNAL) = " << N_SIG << endl;
  cout << "N(ACCEPTANCE) = " << N_ACC << endl;

  cout << "N(FORWARD - SIGNAL) = " << N_FOR_N_SIG << endl;
  cout << "N(FORWARD - SIGNAL - ACCEPTANCE) = " << N_FOR_ONLY << endl;
  cout << "N(SIGNAL - ACCEPTANCE) = " << N_SIG_N_ACC << endl;
  cout << "N(ACCEPTANCE - SIGNAL) = " << N_ACC_N_SIG << endl;  
  cout << "N(SIGNAL & ACCEPTANCE) = " << N_SIG_A_ACC << endl;

  cout << endl << " ------------------- " << endl << endl;
  
  cout << "P(BACKWARD) = "; probinfo(N_BACK,N);
  cout << "P(FORWARD) = "; probinfo(N_FOR,N);
  cout << "P(SIGNAL) = "; probinfo(N_SIG,N);
  cout << "P(ACCEPTANCE) = "; probinfo(N_ACC,N);

  cout << "P(FORWARD - SIGNAL) = "; probinfo(N_FOR_N_SIG,N);
  cout << "P(FORWAFD - SIGNAL - ACCEPTANCE) = "; probinfo(N_FOR_ONLY,N);
  cout << "P(SIGNAL - ACCEPTANCE) = "; probinfo(N_SIG_N_ACC,N);
  cout << "P(ACCEPTANCE - SIGNAL) = "; probinfo(N_ACC_N_SIG,N);
  cout << "P(SIGNAL & ACCEPTANCE) = "; probinfo(N_SIG_A_ACC,N);
  
  cout << "P(SIGNAL|FORWARD) = "; probinfo(N_SIG,N_FOR);
  cout << "P(!SIGNAL|FORWARD) = "; probinfo(N_FOR_N_SIG,N_FOR);
  cout << "P(ACCEPTANCE|FORWARD) = "; probinfo(N_ACC,N_FOR);
  cout << "P(ACCEPTANCE|SIGNAL) = "; probinfo(N_SIG_A_ACC,N_SIG);
  cout << "P(ACCEPTANCE|FORWARD - SIGNAL) = "; probinfo(N_ACC_N_SIG,N_FOR_ONLY);
  cout << "P(SIGNAL|ACCEPTANCE) = "; probinfo(N_SIG_A_ACC,N_ACC);
  cout << "P(FORWARD - SIGNAL|ACCEPTANCE) = "; probinfo(N_ACC_N_SIG,N_ACC);
  
  cout << endl << " ------------------- " << endl << endl;

  long N_SIG_RECO = count(mctree,SIGNAL_BC,RECO);
  long N_ACC_RECO = count(mctree,ACCEPTANCE,RECO);
  long N_ACC_N_SIG_RECO = count(mctree,ACCEPTANCE,NOT_SIGNAL_BC,RECO);
  long N_SIG_N_ACC_RECO = count(mctree,NOT_ACCEPTANCE,SIGNAL_BC,RECO);
  long N_SIG_A_ACC_RECO = count(mctree,SIGNAL_BC,ACCEPTANCE,RECO);

  cout << "P(RECO|SIGNAL) = "; probinfo(N_SIG_RECO,N_SIG);
  cout << "P(RECO|ACCEPTANCE) = "; probinfo(N_ACC_RECO,N_ACC);
  cout << "P(RECO|SIGNAL - ACCEPTANCE) = "; probinfo(N_SIG_N_ACC_RECO,N_SIG_N_ACC);
  cout << "P(RECO|ACCEPTANCE - SIGNAL) = "; probinfo(N_ACC_N_SIG_RECO,N_ACC_N_SIG);
  cout << "P(RECO|SIGNAL & ACCEPTANCE) = "; probinfo(N_SIG_A_ACC_RECO,N_SIG_A_ACC);

  cout << endl << " ------------------- " << endl << endl;

  long N_SIG_RECO_STRIPPED = count(mctree,SIGNAL_BC,RECO,STRIPPED);
  long N_ACC_RECO_STRIPPED = count(mctree,ACCEPTANCE,RECO,STRIPPED);
  long N_ACC_N_SIG_RECO_STRIPPED = count(mctree,ACCEPTANCE,NOT_SIGNAL_BC,RECO,STRIPPED);
  long N_SIG_N_ACC_RECO_STRIPPED = count(mctree,NOT_ACCEPTANCE,SIGNAL_BC,RECO,STRIPPED);
  long N_SIG_A_ACC_RECO_STRIPPED = count(mctree,SIGNAL_BC,ACCEPTANCE,RECO,STRIPPED);

  cout << "P(STRIPPED|SIGNAL & RECO) = "; probinfo(N_SIG_RECO_STRIPPED,N_SIG_RECO);
  cout << "P(STRIPPED|ACCEPTANCE & RECO) = "; probinfo(N_ACC_RECO_STRIPPED,N_ACC_RECO);
  cout << "P(STRIPPED|SIGNAL - ACCEPTANCE & RECO) = "; probinfo(N_SIG_N_ACC_RECO_STRIPPED,N_SIG_N_ACC_RECO);
  cout << "P(STRIPPED|ACCEPTANCE - SIGNAL & RECO) = "; probinfo(N_ACC_N_SIG_RECO_STRIPPED,N_ACC_N_SIG_RECO);
  cout << "P(STRIPPED|SIGNAL & ACCEPTANCE & RECO) = "; probinfo(N_SIG_A_ACC_RECO_STRIPPED,N_SIG_A_ACC_RECO);

  cout << endl << " ------------------- " << endl << endl;

  cout << "N(STRIPPED & SIGNAL & RECO) = " << N_SIG_RECO_STRIPPED << endl;
  cout << "N(STRIPPED & ACCEPTANCE & RECO) = " << N_ACC_RECO_STRIPPED << endl;
  cout << "N(STRIPPED & SIGNAL - ACCEPTANCE & RECO) = " << N_SIG_N_ACC_RECO_STRIPPED << endl;
  cout << "N(STRIPPED & ACCEPTANCE - SIGNAL & RECO) = " << N_ACC_N_SIG_RECO_STRIPPED << endl;
  cout << "N(STRIPPED & SIGNAL & ACCEPTANCE & RECO) = " << N_SIG_A_ACC_RECO_STRIPPED << endl;

  cout << endl << " ------------------- " << endl << endl;

  long N_SIG_STRIPPED_SEL = count(rectree,SIGNAL_BC,TMED);
  long N_ACC_STRIPPED_SEL = count(rectree,ACCEPTANCE,TMED);
  long N_ACC_N_SIG_STRIPPED_SEL = count(rectree,ACCEPTANCE,NOT_SIGNAL_BC,TMED);
  long N_SIG_N_ACC_STRIPPED_SEL = count(rectree,NOT_ACCEPTANCE,SIGNAL_BC,TMED);
  long N_SIG_A_ACC_STRIPPED_SEL = count(rectree,SIGNAL_BC,ACCEPTANCE,TMED);

  cout << N_SIG_STRIPPED_SEL << endl;
  cout << N_ACC_STRIPPED_SEL << endl;
  cout << N_ACC_N_SIG_STRIPPED_SEL << endl;
  cout << N_SIG_N_ACC_STRIPPED_SEL << endl;
  cout << N_SIG_A_ACC_STRIPPED_SEL << endl;
  

  cout << "P(SELECTED|SIGNAL) = "; probinfo(N_SIG_STRIPPED_SEL,N_SIG_RECO_STRIPPED);
  cout << "P(SELECTED|ACCEPTANCE) = "; probinfo(N_ACC_STRIPPED_SEL,N_ACC_RECO_STRIPPED);
  cout << "P(SELECTED|SIGNAL - ACCEPTANCE) = "; probinfo(N_SIG_N_ACC_STRIPPED_SEL,N_SIG_N_ACC_RECO_STRIPPED);
  cout << "P(SELECTED|ACCEPTANCE - SIGNAL) = "; probinfo(N_ACC_N_SIG_STRIPPED_SEL,N_ACC_N_SIG_RECO_STRIPPED);
  cout << "P(SELECTED|SIGNAL & ACCEPTANCE) = "; probinfo(N_SIG_A_ACC_STRIPPED_SEL,N_SIG_A_ACC_RECO_STRIPPED);

  cout << endl << " ------------------- " << endl << endl;

  long N_SIG_STRIPPED_SEL_TRIG = count(rectree,SIGNAL_BC,TMED,STRIPPED,TRIG);
  long N_ACC_STRIPPED_SEL_TRIG = count(rectree,ACCEPTANCE,TMED,STRIPPED,TRIG);
  long N_ACC_N_SIG_STRIPPED_SEL_TRIG = count(rectree,ACCEPTANCE,NOT_SIGNAL_BC,TMED,STRIPPED,TRIG);
  long N_SIG_N_ACC_STRIPPED_SEL_TRIG = count(rectree,NOT_ACCEPTANCE,SIGNAL_BC,TMED,STRIPPED,TRIG);
  long N_SIG_A_ACC_STRIPPED_SEL_TRIG = count(rectree,SIGNAL_BC,ACCEPTANCE,TMED,STRIPPED,TRIG);

//   long N_SIG_STRIPPED_SEL_TRIG = count(rectree,SIGNAL_BC,TMED,TRIG);
//   long N_ACC_STRIPPED_SEL_TRIG = count(rectree,ACCEPTANCE,TMED,TRIG);
//   long N_ACC_N_SIG_STRIPPED_SEL_TRIG = count(rectree,ACCEPTANCE,NOT_SIGNAL_BC,TMED,TRIG);
//   long N_SIG_N_ACC_STRIPPED_SEL_TRIG = count(rectree,NOT_ACCEPTANCE,SIGNAL_BC,TMED,TRIG);
//   long N_SIG_A_ACC_STRIPPED_SEL_TRIG = count(rectree,SIGNAL_BC,ACCEPTANCE,TMED,TRIG);

  cout << N_SIG_STRIPPED_SEL_TRIG << endl;
  cout << N_ACC_STRIPPED_SEL_TRIG << endl;
  cout << N_ACC_N_SIG_STRIPPED_SEL_TRIG << endl;
  cout << N_SIG_N_ACC_STRIPPED_SEL_TRIG << endl;
  cout << N_SIG_A_ACC_STRIPPED_SEL_TRIG << endl;
  

  cout << "P(TRIG|SELECTED & SIGNAL) = "; probinfo(N_SIG_STRIPPED_SEL_TRIG,N_SIG_STRIPPED_SEL);
  cout << "P(TRIG|SELECTED & ACCEPTANCE) = "; probinfo(N_ACC_STRIPPED_SEL_TRIG,N_ACC_STRIPPED_SEL);
  cout << "P(TRIG|SELECTED & SIGNAL - ACCEPTANCE) = "; probinfo(N_SIG_N_ACC_STRIPPED_SEL_TRIG,N_SIG_N_ACC_STRIPPED_SEL);
  cout << "P(TRIG|SELECTED & ACCEPTANCE - SIGNAL) = "; probinfo(N_ACC_N_SIG_STRIPPED_SEL_TRIG,N_ACC_N_SIG_STRIPPED_SEL);
  cout << "P(TRIG|SELECTED & SIGNAL & ACCEPTANCE) = "; probinfo(N_SIG_A_ACC_STRIPPED_SEL_TRIG,N_SIG_A_ACC_STRIPPED_SEL);

  cout << endl << " ------------------- " << endl << endl;

  cout << "TOTAL EFFICIENCY(SIGNAL) = "; probinfo(N_SIG_A_ACC_STRIPPED_SEL_TRIG,N_SIG_A_ACC);
  cout << "TOTAL EFFICIENCY(OTHER) = "; probinfo(N_ACC_N_SIG_STRIPPED_SEL_TRIG,N_ACC_N_SIG);
}
